// Esquema para el nuevo sistema course-based
// Sin persistencia de usuarios - todo basado en cursos y sesiones
generator client {
  provider = "prisma-client-js"
}

// Configuración para desarrollo (PostgreSQL) y producción (MySQL)
// Para cambiar a MySQL en producción, usar: npm run prisma:mysql
datasource db {
  provider = "postgresql"  // Cambiar a "mysql" para producción
  url      = env("DATABASE_URL")
}

// Modelo de Curso (sin usuario asociado)
model Course {
  id              String   @id @default(cuid())
  moodleCourseId  String   @unique
  name            String
  shortName       String?
  lastAnalyzedBy  String?  // Matrícula del último profesor que analizó
  lastSync        DateTime?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relaciones
  groups          Group[]
  analysisResults AnalysisResult[]
  
  @@index([moodleCourseId])
  @@index([lastAnalyzedBy])
}

// Modelo de Grupo dentro de un Curso
model Group {
  id              String   @id @default(cuid())
  moodleGroupId   String   @unique
  name            String
  courseId        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relaciones
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  analysisResults AnalysisResult[]
  
  @@index([courseId])
  @@index([moodleGroupId])
}

// Modelo de Resultado de Análisis (course-based)
model AnalysisResult {
  id              String   @id @default(cuid())
  
  // Identificadores del curso y grupo
  courseId        String
  moodleCourseId  String   // Redundante pero útil para queries
  groupId         String?
  moodleGroupId   String?  // Redundante pero útil para queries
  
  // Profesor que realizó el análisis (sin FK, solo referencia)
  analyzedBy      String   // Matrícula del profesor
  analyzedByName  String?  // Nombre del profesor (cache)
  
  // Tipo de análisis
  analysisType    String   // 'COURSE_OVERVIEW', 'ACTIVITY_ANALYSIS', etc.
  
  // Resultados del análisis
  strengths       Json     // Array de fortalezas identificadas
  alerts          Json     // Array de alertas o problemas
  recommendations Json?    // Array de recomendaciones
  nextStep        String   // Sugerencia de próximo paso
  overallHealth   String?  // 'buena', 'regular', 'necesita atención'
  studentsAtRisk  String?  // Descripción de estudiantes en riesgo
  
  // Datos adicionales
  rawData         Json?    // Datos crudos de Moodle
  llmResponse     Json?    // Respuesta completa del LLM
  
  // Métricas del análisis
  studentsAnalyzed Int?    // Número de estudiantes analizados
  activitiesCount  Int?    // Número de actividades analizadas
  forumsCount      Int?    // Número de foros analizados
  
  // Metadatos
  processedAt     DateTime @default(now())
  isLatest        Boolean  @default(true)
  confidence      Float?   // Nivel de confianza del análisis (0-1)
  
  // Relaciones
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  group           Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@index([courseId])
  @@index([groupId])
  @@index([moodleCourseId])
  @@index([analyzedBy])
  @@index([isLatest])
  @@index([processedAt])
  @@index([analysisType])
}

// Modelo para Análisis de Actividades Individuales
model ActivityAnalysis {
  id              String   @id @default(cuid())
  
  // Identificadores de la actividad
  courseId        String
  moodleCourseId  String   // ID del curso en Moodle
  activityId      String   // ID de la actividad en Moodle
  activityType    String   // 'forum', 'assign', 'quiz', etc.
  activityName    String   // Nombre de la actividad
  
  // Análisis completo
  summary         String   @db.Text // Resumen del análisis (puede ser largo) - MySQL: TEXT, PostgreSQL: text
  positives       Json     // Array de aspectos positivos
  alerts          Json     // Array de alertas/problemas
  insights        Json     // Array de insights clave
  recommendation  String   @db.Text // Recomendación principal (puede ser larga) - MySQL: TEXT, PostgreSQL: text
  fullAnalysis    String?  @db.Text // Análisis completo en formato Markdown - MySQL: TEXT, PostgreSQL: text
  
  // Análisis específico por tipo
  forumAnalysis   Json?    // Análisis específico de foros
  assignAnalysis  Json?    // Análisis específico de tareas
  
  // Datos originales y respuesta completa
  activityData    Json     // Datos completos de la actividad
  llmResponse     Json     // Respuesta completa del LLM
  
  // Metadatos
  generatedAt     DateTime @default(now())
  lastUpdated     DateTime @updatedAt
  isValid         Boolean  @default(true)
  
  // Índices para búsqueda rápida
  @@unique([courseId, activityId, activityType])
  @@index([courseId])
  @@index([activityId])
  @@index([activityType])
  @@index([generatedAt])
  @@index([lastUpdated])
}

// Modelo de Jobs para el sistema de colas
model JobLog {
  id              String   @id @default(cuid())
  jobId           String   @unique
  jobType         String   // 'scheduled' o 'on-demand'
  status          String   // 'pending', 'processing', 'completed', 'failed'
  courseId        String?
  groupId         String?
  analyzedBy      String?  // Matrícula del profesor
  error           String?
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime @default(now())
  
  @@index([status])
  @@index([createdAt])
  @@index([analyzedBy])
}

// Modelo de Caché Persistente para mantener datos entre sesiones
model CourseCache {
  id                  String   @id @default(cuid())
  courseId            String   // ID del curso en formato "courseId|groupId"
  
  // Datos cacheados
  activities          Json     // Actividades abiertas
  analysisResults     Json     // Resultados de análisis
  activitiesSummary   Json?    // Resumen de actividades
  courseAnalysisId    String?  // ID del análisis del curso
  
  // Metadatos del caché
  lastFetched         DateTime // Timestamp de la última actualización
  expiresAt           DateTime // Cuándo expira este caché (1 hora después de lastFetched)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Para limpiezas automáticas
  isActive            Boolean  @default(true)
  
  @@unique([courseId])
  @@index([expiresAt])
  @@index([lastFetched])
  @@index([isActive])
}

// Modelo de Cola de Análisis para procesamiento en background
model AnalysisQueue {
  id              String   @id @default(cuid())
  courseId        String   // ID del curso en formato "courseId|groupId"
  activityId      String   // ID de la actividad en Moodle
  activityType    String   // Tipo: 'assign', 'forum', etc.
  activityName    String   // Nombre de la actividad
  
  // Estado del análisis
  status          String   // 'pending', 'processing', 'completed', 'failed'
  priority        Int      @default(0) // Prioridad (mayor número = mayor prioridad)
  
  // Datos de la actividad para el análisis
  activityData    Json     // Datos completos de la actividad
  
  // Resultados (si completado)
  analysisResult  Json?    // Resultado del análisis
  
  // Control de intentos
  attempts        Int      @default(0)
  maxAttempts     Int      @default(3)
  lastError       String?
  
  // Metadatos
  requestedBy     String?  // Quién solicitó el análisis
  requestedAt     DateTime @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  
  // Índices para optimización
  @@unique([courseId, activityId, activityType])
  @@index([status])
  @@index([priority])
  @@index([requestedAt])
  @@index([courseId])
}

// ============================================
// NUEVAS TABLAS PARA SISTEMA BATCH
// ============================================

// Modelo para almacenar información de cada aula UTEL
model Aula {
  id              String   @id @default(cuid())
  aulaId          String   @unique // "101", "102", "av141", etc.
  name            String   // "Aula 101", "AV141", etc.
  baseUrl         String   // "https://aula101.utel.edu.mx"
  apiUrl          String   // URL completa del webservice
  isActive        Boolean  @default(true)
  lastSync        DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relaciones
  courses         AulaCourse[]
  activities      CourseActivity[]
  analyses        BatchAnalysis[]
  
  @@index([aulaId])
  @@index([isActive])
}

// Modelo para cursos activos en cada aula
model AulaCourse {
  id              String   @id @default(cuid())
  aulaId          String   // "101", "102", etc.
  courseId        Int      // ID del curso en Moodle
  courseName      String   // Nombre completo del curso
  shortName       String?  // Nombre corto del curso
  categoryName    String?  // Categoría del curso
  isActive        Boolean  @default(true)
  startDate       DateTime?
  endDate         DateTime?
  teacherIds      Json?    // Array de IDs de profesores
  teacherNames    Json?    // Array de nombres de profesores
  enrollmentCount Int?     // Número de estudiantes matriculados
  rawData         Json     // Datos completos del curso desde Moodle
  lastSync        DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relaciones
  aula            Aula     @relation(fields: [aulaId], references: [aulaId], onDelete: Cascade)
  activities      CourseActivity[]
  analyses        BatchAnalysis[]
  
  @@unique([aulaId, courseId])
  @@index([aulaId])
  @@index([courseId])
  @@index([isActive])
  @@index([lastSync])
  @@index([teacherIds])
}

// Modelo para actividades (tareas, foros, etc.) de cada curso
model CourseActivity {
  id              String   @id @default(cuid())
  aulaId          String   // "101", "102", etc.
  courseId        Int      // ID del curso en Moodle
  activityId      Int      // ID de la actividad en Moodle
  type            String   // "forum", "assign", "quiz", etc.
  name            String   // Nombre de la actividad
  description     String?  @db.Text // Descripción completa
  dueDate         DateTime?
  cutoffDate      DateTime?
  openDate        DateTime?
  closeDate       DateTime?
  visible         Boolean  @default(true)
  url             String?  // URL directa a la actividad
  
  // Estadísticas específicas por tipo
  forumData       Json?    // Datos específicos de foros (discusiones, posts, etc.)
  assignmentData  Json?    // Datos específicos de tareas (entregas, calificaciones, etc.)
  quizData        Json?    // Datos específicos de cuestionarios
  
  // Datos completos de Moodle
  rawData         Json     // Todos los datos de la actividad
  
  // Control de sincronización
  lastDataSync    DateTime @default(now()) // Última vez que se sincronizaron los datos
  needsAnalysis   Boolean  @default(true)  // Si necesita análisis
  analysisCount   Int      @default(0)     // Número de análisis generados
  
  // Metadatos
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relaciones
  aula            Aula          @relation(fields: [aulaId], references: [aulaId], onDelete: Cascade)
  course          AulaCourse    @relation(fields: [aulaId, courseId], references: [aulaId, courseId], onDelete: Cascade)
  analyses        BatchAnalysis[]
  
  @@unique([aulaId, courseId, activityId, type])
  @@index([aulaId])
  @@index([courseId])
  @@index([activityId])
  @@index([type])
  @@index([dueDate])
  @@index([needsAnalysis])
  @@index([lastDataSync])
}

// Modelo para análisis generados por el sistema batch
model BatchAnalysis {
  id              String   @id @default(cuid())
  aulaId          String   // "101", "102", etc.
  courseId        Int      // ID del curso
  activityId      Int?     // ID de la actividad (null para análisis de curso completo)
  activityType    String?  // Tipo de actividad (null para análisis de curso)
  
  // Tipo de análisis
  analysisType    String   // "COURSE_OVERVIEW", "ACTIVITY_DETAIL", "FORUM_ANALYSIS", "ASSIGNMENT_ANALYSIS"
  analysisScope   String   // "COURSE", "ACTIVITY", "BATCH"
  
  // Resultados del análisis en formato markdown
  analysisText    String   @db.Text // Análisis principal en markdown
  summary         String?  @db.Text // Resumen ejecutivo
  keyInsights     Json?    // Insights principales estructurados
  recommendations Json?    // Recomendaciones específicas
  alertFlags      Json?    // Alertas o problemas identificados
  
  // Secciones estructuradas para el dashboard
  sections        Json?    // Secciones dinámicas para el DynamicSectionRenderer
  
  // Datos de entrada y procesamiento
  inputData       Json     // Datos que se usaron para generar el análisis
  llmPrompt       String?  @db.Text // Prompt usado para generar el análisis
  llmResponse     String?  @db.Text // Respuesta completa del LLM
  processingTime  Int?     // Tiempo de procesamiento en ms
  
  // Metadatos de calidad
  confidence      Float?   // Nivel de confianza del análisis (0-1)
  dataCompleteness Float?  // Completitud de los datos usados (0-1)
  studentsAnalyzed Int?    // Número de estudiantes en el análisis
  
  // Control de versiones y vigencia
  batchJobId      String?  // ID del job batch que lo generó
  isLatest        Boolean  @default(true) // Si es el análisis más reciente
  expiresAt       DateTime // Cuándo expira este análisis
  generatedAt     DateTime @default(now())
  
  // Relaciones
  aula            Aula           @relation(fields: [aulaId], references: [aulaId], onDelete: Cascade)
  course          AulaCourse     @relation(fields: [aulaId, courseId], references: [aulaId, courseId], onDelete: Cascade)
  activity        CourseActivity? @relation(fields: [aulaId, courseId, activityId, activityType], references: [aulaId, courseId, activityId, type], onDelete: Cascade)
  
  @@index([aulaId])
  @@index([courseId])
  @@index([activityId])
  @@index([analysisType])
  @@index([isLatest])
  @@index([expiresAt])
  @@index([generatedAt])
  @@index([batchJobId])
}

// Modelo para jobs de sincronización batch
model BatchJob {
  id              String   @id @default(cuid())
  jobType         String   // "FULL_SYNC", "AULA_SYNC", "ANALYSIS_BATCH"
  scope           String   // "ALL_AULAS", "SINGLE_AULA", "COURSE_LIST"
  targetAulas     Json?    // Array de aulas a procesar (null = todas)
  targetCourses   Json?    // Array de cursos específicos (null = todos)
  
  // Estado del job
  status          String   // "QUEUED", "RUNNING", "COMPLETED", "FAILED", "CANCELLED"
  priority        Int      @default(0) // Prioridad del job
  
  // Progreso y estadísticas
  totalSteps      Int?     // Número total de pasos
  currentStep     Int?     // Paso actual
  processedAulas  Int      @default(0)
  processedCourses Int     @default(0)
  processedActivities Int  @default(0)
  generatedAnalyses Int    @default(0)
  
  // Resultados y errores
  successCount    Int      @default(0)
  errorCount      Int      @default(0)
  errors          Json?    // Array de errores encontrados
  summary         Json?    // Resumen del job completado
  
  // Metadatos de ejecución
  scheduledFor    DateTime? // Cuándo debe ejecutarse (para jobs programados)
  startedAt       DateTime?
  completedAt     DateTime?
  duration        Int?     // Duración en ms
  triggeredBy     String?  // "CRON", "MANUAL", "API"
  requestedBy     String?  // Usuario que lo solicitó (si aplica)
  
  // Control de la ejecución
  maxRetries      Int      @default(3)
  retryCount      Int      @default(0)
  lastError       String?  @db.Text
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([status])
  @@index([jobType])
  @@index([priority])
  @@index([scheduledFor])
  @@index([startedAt])
  @@index([createdAt])
  @@index([triggeredBy])
}