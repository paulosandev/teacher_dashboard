import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth/auth-options'
import { MoodleAPIClient } from '@/lib/moodle/api-client'
import { PrismaClient } from '@prisma/client'
import OpenAI from 'openai'

// Singleton pattern para Prisma Client
const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

const prisma = globalForPrisma.prisma ?? new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function POST(request: NextRequest) {
  try {
    // Verificar autenticaci√≥n
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.moodleToken) {
      return NextResponse.json({ error: 'No autenticado' }, { status: 401 })
    }

    // Verificar expiraci√≥n del token
    if (session.user.tokenExpiry && new Date() > new Date(session.user.tokenExpiry)) {
      return NextResponse.json({ error: 'Token expirado' }, { status: 401 })
    }

    const { activityId, activityType, activityData, includeDetailedInfo } = await request.json()

    if (!activityId || !activityType || !activityData) {
      return NextResponse.json({ 
        error: 'Se requiere activityId, activityType y activityData' 
      }, { status: 400 })
    }

    // Determinar courseId desde los datos de la actividad
    const courseId = activityData.course?.toString() || activityData.courseid?.toString()
    
    if (!courseId) {
      return NextResponse.json({ 
        error: 'No se pudo determinar el courseId de la actividad' 
      }, { status: 400 })
    }

    console.log(`üß† Verificando an√°lisis existente para ${activityType}: ${activityData.name}`)

    // Verificar si ya existe un an√°lisis reciente (menos de 4 horas)
    const fourHoursAgo = new Date(Date.now() - (4 * 60 * 60 * 1000))
    const existingAnalysis = await prisma.activityAnalysis.findFirst({
      where: {
        moodleCourseId: courseId,
        activityId: activityId.toString(),
        activityType: activityType,
        lastUpdated: {
          gte: fourHoursAgo
        },
        isValid: true
      }
    })

    if (existingAnalysis) {
      console.log(`‚ôªÔ∏è Usando an√°lisis en cache para ${activityData.name}`)
      
      return NextResponse.json({
        success: true,
        analysis: {
          summary: existingAnalysis.summary,
          positives: existingAnalysis.positives,
          alerts: existingAnalysis.alerts,
          insights: existingAnalysis.insights,
          recommendation: existingAnalysis.recommendation,
          generatedAt: existingAnalysis.generatedAt.toISOString(),
          activityName: existingAnalysis.activityName,
          activityId: existingAnalysis.activityId,
          activityType: existingAnalysis.activityType,
          fromCache: true
        }
      })
    }

    console.log(`üß† Generando nuevo an√°lisis para ${activityType}: ${activityData.name}`)

    // Crear cliente API con el token de la sesi√≥n
    const client = new MoodleAPIClient(process.env.MOODLE_URL!, session.user.moodleToken)

    let analysisResult = null

    // An√°lisis espec√≠fico por tipo de actividad
    if (activityType === 'forum') {
      analysisResult = await analyzeForum(client, activityData, openai)
    } else if (activityType === 'assign') {
      analysisResult = await analyzeAssignment(client, activityData, openai)
    } else if (activityType === 'feedback' || activityType === 'quiz' || activityType === 'choice') {
      analysisResult = await analyzeGenericActivity(client, activityData, openai, activityType)
    } else {
      return NextResponse.json({ 
        error: `Tipo de actividad no soportado: ${activityType}` 
      }, { status: 400 })
    }

    // Guardar el an√°lisis en la base de datos
    try {
      // Primero buscar si existe
      const existing = await prisma.activityAnalysis.findFirst({
        where: {
          moodleCourseId: courseId,
          activityId: activityId.toString(),
          activityType: activityType
        }
      })

      if (existing) {
        // Actualizar existente
        await prisma.activityAnalysis.update({
          where: { id: existing.id },
          data: {
            summary: analysisResult.summary,
            positives: analysisResult.positives,
            alerts: analysisResult.alerts,
            insights: analysisResult.insights,
            recommendation: analysisResult.recommendation,
            activityData: activityData,
            llmResponse: { model: 'gpt-4', generatedAt: new Date() },
            lastUpdated: new Date()
          }
        })
      } else {
        // Crear nuevo
        await prisma.activityAnalysis.create({
          data: {
            courseId: courseId,
            moodleCourseId: courseId,
            activityId: activityId.toString(),
            activityType: activityType,
            activityName: activityData.name,
            summary: analysisResult.summary,
            positives: analysisResult.positives,
            alerts: analysisResult.alerts,
            insights: analysisResult.insights,
            recommendation: analysisResult.recommendation,
            activityData: activityData,
            llmResponse: { model: 'gpt-4', generatedAt: new Date() }
          }
        })
      }

      console.log(`üíæ An√°lisis guardado en cache para ${activityData.name}`)
    } catch (dbError) {
      console.error('‚ö†Ô∏è Error guardando en cache (continuando):', dbError)
      // No fallar si hay error en la base de datos, solo continuar
    }

    const response: any = {
      success: true,
      analysis: analysisResult
    }

    // Incluir informaci√≥n adicional si se solicita
    if (includeDetailedInfo) {
      response.prompt = analysisResult.prompt || 'No disponible'
      response.collectedData = {
        activityType,
        activityName: activityData.name,
        rawActivityData: activityData,
        processingTimestamp: new Date().toISOString()
      }
    }

    return NextResponse.json(response)

  } catch (error: any) {
    console.error('‚ùå Error en an√°lisis de actividad:', error)
    return NextResponse.json(
      { error: error.message || 'Error interno del servidor' },
      { status: 500 }
    )
  }
}

async function analyzeForum(client: MoodleAPIClient, forumData: any, openai: OpenAI) {
  console.log(`üí¨ Analizando foro: ${forumData.name}`)

  // Preparar datos para el an√°lisis
  const analysisData = {
    name: forumData.name,
    description: forumData.intro || '',
    config: forumData.forumDetails || {},
    discussions: forumData.forumDetails?.discussions || [],
    stats: {
      totalDiscussions: forumData.forumDetails?.numdiscussions || 0,
      totalPosts: forumData.forumDetails?.totalPosts || 0,
      uniqueParticipants: forumData.forumDetails?.uniqueParticipants || 0,
      avgPostsPerParticipant: forumData.forumDetails?.avgPostsPerParticipant || 0
    }
  }

  console.log(`üì§ DATOS ENVIADOS A PROCESAR - FORO:`)
  console.log(`   üìã Datos del foro:`, JSON.stringify(analysisData, null, 2))
  console.log(`   üìä Estad√≠sticas: ${analysisData.stats.totalDiscussions} discusiones, ${analysisData.stats.totalPosts} posts`)
  console.log(`   üë• ${analysisData.stats.uniqueParticipants} participantes √∫nicos`)

  // Crear prompt espec√≠fico para an√°lisis de foro
  const prompt = `
Analiza el siguiente foro educativo y proporciona un an√°lisis completo siguiendo este formato espec√≠fico:

## DATOS DEL FORO:
- Nombre: ${analysisData.name}
- Descripci√≥n: ${analysisData.description}
- Discusiones totales: ${analysisData.stats.totalDiscussions}
- Posts totales: ${analysisData.stats.totalPosts}
- Participantes √∫nicos: ${analysisData.stats.uniqueParticipants}
- Promedio posts por participante: ${analysisData.stats.avgPostsPerParticipant}

## DISCUSIONES RECIENTES:
${analysisData.discussions.slice(0, 5).map(d => `
- "${d.name || d.subject}"
  Respuestas: ${d.numreplies}
  Contenido: ${d.message ? d.message.substring(0, 200) + '...' : 'Sin contenido'}
`).join('\n')}

Por favor, proporciona un an√°lisis estructurado con:

1. **RESUMEN GENERAL DE PARTICIPACI√ìN** (2-3 l√≠neas):
   - Nivel de actividad general
   - Distribuci√≥n de participaci√≥n

2. **ASPECTOS POSITIVOS** (3-4 puntos espec√≠ficos):
   - Elementos destacables de la participaci√≥n
   - Calidad de las interacciones
   - Cumplimiento de objetivos

3. **√ÅREAS DE MEJORA** (2-3 alertas o recomendaciones):
   - Problemas identificados
   - Oportunidades de mejora

4. **INSIGHTS CLAVE PARA EVALUACI√ìN** (2-3 puntos):
   - Elementos relevantes para la evaluaci√≥n acad√©mica
   - Patrones de comportamiento estudiantil

5. **RECOMENDACI√ìN DOCENTE INMEDIATA**:
   - Una acci√≥n espec√≠fica y pr√°ctica que el profesor puede tomar

El an√°lisis debe ser profesional, basado en datos pedag√≥gicos y √∫til para un profesor universitario.
`

  console.log(`üöÄ ENVIANDO A OpenAI - FORO:`)
  console.log(`   üîó Modelo: gpt-4`)
  console.log(`   üìù Prompt (primeros 200 chars):`, prompt.substring(0, 200) + '...')
  console.log(`   ‚öôÔ∏è Configuraci√≥n: max_tokens=1500, temperature=0.3`)

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "Eres un experto en an√°lisis educativo y evaluaci√≥n de participaci√≥n estudiantil en foros acad√©micos. Proporciona an√°lisis detallados, pr√°cticos y basados en evidencia pedag√≥gica."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 1500,
      temperature: 0.3
    })

    const analysisText = completion.choices[0]?.message?.content || ''
    
    // Parsear la respuesta en secciones estructuradas
    const analysis = parseForumAnalysis(analysisText)
    
    console.log(`‚úÖ An√°lisis de foro completado para: ${forumData.name}`)
    
    return {
      ...analysis,
      activityId: forumData.id,
      activityType: 'forum',
      activityName: forumData.name,
      rawData: analysisData,
      prompt: prompt, // Guardar el prompt usado
      generatedAt: new Date().toISOString()
    }

  } catch (error) {
    console.error('‚ùå Error en an√°lisis de foro:', error)
    throw new Error('Error al generar an√°lisis del foro')
  }
}

async function analyzeAssignment(client: MoodleAPIClient, assignmentData: any, openai: OpenAI) {
  console.log(`üìù Analizando asignaci√≥n: ${assignmentData.name}`)

  // Preparar datos para el an√°lisis
  const analysisData = {
    name: assignmentData.name,
    description: assignmentData.intro || '',
    config: assignmentData.assignDetails || {},
    stats: {
      submissionCount: assignmentData.assignDetails?.submissionCount || 0,
      gradeCount: assignmentData.assignDetails?.gradeCount || 0,
      avgGrade: assignmentData.assignDetails?.avgGrade || 0,
      gradingProgress: assignmentData.assignDetails?.gradingProgress || 0
    },
    dates: {
      duedate: assignmentData.duedate,
      cutoffdate: assignmentData.cutoffdate,
      status: assignmentData.status
    }
  }

  console.log(`üì§ DATOS ENVIADOS A PROCESAR - ASIGNACI√ìN:`)
  console.log(`   üìã Datos de la asignaci√≥n:`, JSON.stringify(analysisData, null, 2))
  console.log(`   üìä Entregas: ${analysisData.stats.submissionCount}, Calificadas: ${analysisData.stats.gradeCount}`)
  console.log(`   üìà Progreso: ${analysisData.stats.gradingProgress}%, Promedio: ${analysisData.stats.avgGrade}`)

  // Crear prompt espec√≠fico para an√°lisis de asignaci√≥n
  const prompt = `
Analiza la siguiente asignaci√≥n educativa y proporciona un an√°lisis completo:

## DATOS DE LA ASIGNACI√ìN:
- Nombre: ${analysisData.name}
- Descripci√≥n: ${analysisData.description}
- Estado: ${analysisData.dates.status}
- Entregas recibidas: ${analysisData.stats.submissionCount}
- Calificaciones completadas: ${analysisData.stats.gradeCount}
- Promedio de calificaci√≥n: ${analysisData.stats.avgGrade}
- Progreso de calificaci√≥n: ${analysisData.stats.gradingProgress}%

## CONFIGURACI√ìN:
- Intentos m√°ximos: ${analysisData.config.maxattempts === -1 ? 'Ilimitados' : analysisData.config.maxattempts}
- Borradores permitidos: ${analysisData.config.submissiondrafts ? 'S√≠' : 'No'}
- Calificaci√≥n ciega: ${analysisData.config.blindmarking ? 'S√≠' : 'No'}

Por favor, proporciona un an√°lisis estructurado con:

1. **RESUMEN DE ENTREGAS** (2-3 l√≠neas):
   - Estado general de las entregas
   - Nivel de cumplimiento

2. **ASPECTOS POSITIVOS** (3-4 puntos):
   - Elementos destacables
   - Indicadores de √©xito

3. **ALERTAS IMPORTANTES** (2-3 puntos):
   - Problemas identificados
   - Riesgos o preocupaciones

4. **AN√ÅLISIS PEDAG√ìGICO** (2-3 puntos):
   - Efectividad de la configuraci√≥n
   - Cumplimiento de objetivos de aprendizaje

5. **ACCI√ìN RECOMENDADA**:
   - Una estrategia espec√≠fica para el profesor

El an√°lisis debe ser profesional y orientado a la mejora del proceso educativo.
`

  console.log(`üöÄ ENVIANDO A OpenAI - ASIGNACI√ìN:`)
  console.log(`   üîó Modelo: gpt-4`)
  console.log(`   üìù Prompt (primeros 200 chars):`, prompt.substring(0, 200) + '...')
  console.log(`   ‚öôÔ∏è Configuraci√≥n: max_tokens=1500, temperature=0.3`)

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "Eres un experto en evaluaci√≥n educativa y an√°lisis de asignaciones acad√©micas. Proporciona an√°lisis pr√°cticos y orientados a la mejora pedag√≥gica."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 1500,
      temperature: 0.3
    })

    const analysisText = completion.choices[0]?.message?.content || ''
    
    // Parsear la respuesta en secciones estructuradas
    const analysis = parseAssignmentAnalysis(analysisText)
    
    console.log(`‚úÖ An√°lisis de asignaci√≥n completado para: ${assignmentData.name}`)
    
    return {
      ...analysis,
      activityId: assignmentData.id,
      activityType: 'assign',
      activityName: assignmentData.name,
      rawData: analysisData,
      prompt: prompt, // Guardar el prompt usado
      generatedAt: new Date().toISOString()
    }

  } catch (error) {
    console.error('‚ùå Error en an√°lisis de asignaci√≥n:', error)
    throw new Error('Error al generar an√°lisis de la asignaci√≥n')
  }
}

function parseForumAnalysis(text: string) {
  // Funci√≥n para extraer secciones del an√°lisis de foro
  const sections = {
    summary: extractSection(text, ['RESUMEN GENERAL', 'RESUMEN DE PARTICIPACI√ìN']),
    positives: extractListSection(text, ['ASPECTOS POSITIVOS', 'ELEMENTOS POSITIVOS']),
    alerts: extractListSection(text, ['√ÅREAS DE MEJORA', 'ALERTAS', 'PROBLEMAS']),
    insights: extractListSection(text, ['INSIGHTS CLAVE', 'ELEMENTOS CLAVE']),
    recommendation: extractSection(text, ['RECOMENDACI√ìN DOCENTE', 'ACCI√ìN RECOMENDADA'])
  }
  
  return sections
}

function parseAssignmentAnalysis(text: string) {
  // Funci√≥n para extraer secciones del an√°lisis de asignaci√≥n
  const sections = {
    summary: extractSection(text, ['RESUMEN DE ENTREGAS', 'RESUMEN GENERAL']),
    positives: extractListSection(text, ['ASPECTOS POSITIVOS', 'ELEMENTOS POSITIVOS']),
    alerts: extractListSection(text, ['ALERTAS IMPORTANTES', 'PROBLEMAS']),
    insights: extractListSection(text, ['AN√ÅLISIS PEDAG√ìGICO', 'INSIGHTS PEDAG√ìGICOS']),
    recommendation: extractSection(text, ['ACCI√ìN RECOMENDADA', 'RECOMENDACI√ìN'])
  }
  
  return sections
}

function extractSection(text: string, keywords: string[]): string {
  for (const keyword of keywords) {
    const regex = new RegExp(`${keyword}[^:]*:?([\\s\\S]*?)(?=\\n\\d+\\.|\\n[A-Z]{2,}|$)`, 'i')
    const match = text.match(regex)
    if (match && match[1]) {
      return match[1].trim().replace(/^\*\*|\*\*$/g, '').trim()
    }
  }
  return 'No disponible'
}

function extractListSection(text: string, keywords: string[]): string[] {
  for (const keyword of keywords) {
    const regex = new RegExp(`${keyword}[^:]*:([\\s\\S]*?)(?=\\n\\d+\\.|\\n[A-Z]{2,}|$)`, 'i')
    const match = text.match(regex)
    if (match && match[1]) {
      const items = match[1]
        .split(/\n/)
        .map(line => line.trim())
        .filter(line => line.startsWith('-') || line.startsWith('‚Ä¢') || line.startsWith('*'))
        .map(line => line.replace(/^[-‚Ä¢*]\s*/, '').trim())
        .filter(line => line.length > 10)
      
      return items.length > 0 ? items : ['An√°lisis en progreso']
    }
  }
  return ['No disponible']
}

async function analyzeGenericActivity(client: MoodleAPIClient, activityData: any, openai: OpenAI, activityType: string) {
  console.log(`üéØ Analizando actividad ${activityType}: ${activityData.name}`)

  // Mapeo de tipos de actividad
  const typeLabels: { [key: string]: string } = {
    'feedback': 'Encuesta/Retroalimentaci√≥n',
    'quiz': 'Cuestionario/Quiz',
    'choice': 'Elecci√≥n/Votaci√≥n'
  }

  const typeLabel = typeLabels[activityType] || 'Actividad'

  // Preparar datos para el an√°lisis
  const analysisData = {
    name: activityData.name,
    description: activityData.intro || '',
    status: activityData.status,
    type: typeLabel,
    participants: activityData.participants || 0,
    responses: activityData.responses || 0
  }

  console.log(`üì§ DATOS ENVIADOS A PROCESAR - ${typeLabel.toUpperCase()}:`)
  console.log(`   üìã Datos de la actividad:`, JSON.stringify(analysisData, null, 2))
  console.log(`   üë• Participantes: ${analysisData.participants}, Respuestas: ${analysisData.responses}`)
  console.log(`   üìä Estado: ${analysisData.status}`)

  // Crear prompt gen√©rico
  const prompt = `
Analiza la siguiente actividad educativa de tipo "${typeLabel}" y proporciona un an√°lisis completo:

## DATOS DE LA ACTIVIDAD:
- Nombre: ${analysisData.name}
- Tipo: ${analysisData.type}
- Descripci√≥n: ${analysisData.description}
- Estado: ${analysisData.status}
- Participantes: ${analysisData.participants}
- Respuestas: ${analysisData.responses}

Por favor, proporciona un an√°lisis estructurado con:

1. **RESUMEN DE PARTICIPACI√ìN** (2-3 l√≠neas):
   - Estado general de la actividad
   - Nivel de participaci√≥n estudiantil

2. **ASPECTOS POSITIVOS** (3-4 puntos):
   - Elementos destacables
   - Indicadores de √©xito

3. **√ÅREAS DE MEJORA** (2-3 puntos):
   - Problemas identificados
   - Oportunidades de mejora

4. **INSIGHTS PEDAG√ìGICOS** (2-3 puntos):
   - Elementos relevantes para el aprendizaje
   - Patrones de comportamiento estudiantil

5. **RECOMENDACI√ìN DOCENTE**:
   - Una acci√≥n espec√≠fica para el profesor

El an√°lisis debe ser profesional y orientado a la mejora pedag√≥gica.
`

  console.log(`üöÄ ENVIANDO A OpenAI - ${typeLabel.toUpperCase()}:`)
  console.log(`   üîó Modelo: gpt-4`)
  console.log(`   üìù Prompt (primeros 200 chars):`, prompt.substring(0, 200) + '...')
  console.log(`   ‚öôÔ∏è Configuraci√≥n: max_tokens=1500, temperature=0.3`)

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: `Eres un experto en an√°lisis educativo especializado en actividades de ${typeLabel}. Proporciona an√°lisis pr√°cticos y orientados a la mejora pedag√≥gica.`
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 1500,
      temperature: 0.3
    })

    const analysisText = completion.choices[0]?.message?.content || ''
    
    // Parsear la respuesta en secciones estructuradas
    const analysis = parseGenericAnalysis(analysisText)
    
    console.log(`‚úÖ An√°lisis de ${typeLabel} completado para: ${activityData.name}`)
    
    return {
      ...analysis,
      activityId: activityData.id,
      activityType: activityType,
      activityName: activityData.name,
      rawData: analysisData,
      prompt: prompt, // Guardar el prompt usado
      generatedAt: new Date().toISOString()
    }

  } catch (error) {
    console.error(`‚ùå Error en an√°lisis de ${typeLabel}:`, error)
    throw new Error(`Error al generar an√°lisis de ${typeLabel}`)
  }
}

function parseGenericAnalysis(text: string) {
  // Funci√≥n para extraer secciones del an√°lisis gen√©rico
  const sections = {
    summary: extractSection(text, ['RESUMEN DE PARTICIPACI√ìN', 'RESUMEN GENERAL']),
    positives: extractListSection(text, ['ASPECTOS POSITIVOS', 'ELEMENTOS POSITIVOS']),
    alerts: extractListSection(text, ['√ÅREAS DE MEJORA', 'PROBLEMAS']),
    insights: extractListSection(text, ['INSIGHTS PEDAG√ìGICOS', 'ELEMENTOS PEDAG√ìGICOS']),
    recommendation: extractSection(text, ['RECOMENDACI√ìN DOCENTE', 'ACCI√ìN RECOMENDADA'])
  }
  
  return sections
}