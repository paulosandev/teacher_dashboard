#!/usr/bin/env node
/**
 * Script para limpiar completamente base de datos, cach√© y datos temporales
 * USO: node scripts/clean-all.js
 */

const { PrismaClient } = require('@prisma/client')
const fs = require('fs')
const path = require('path')

const prisma = new PrismaClient()

async function cleanDatabase() {
  console.log('üßπ Limpiando base de datos...')
  
  try {
    // Limpiar todas las tablas en el orden correcto (evitar errores de FK)
    await prisma.activityAnalysis.deleteMany()
    console.log('   ‚úÖ ActivityAnalysis limpiado')
    
    await prisma.analysisQueue.deleteMany()
    console.log('   ‚úÖ AnalysisQueue limpiado')
    
    await prisma.analysisResult.deleteMany()
    console.log('   ‚úÖ AnalysisResult limpiado')
    
    await prisma.courseCache.deleteMany()
    console.log('   ‚úÖ CourseCache limpiado')
    
    await prisma.jobLog.deleteMany()
    console.log('   ‚úÖ JobLog limpiado')
    
    await prisma.group.deleteMany()
    console.log('   ‚úÖ Group limpiado')
    
    await prisma.course.deleteMany()
    console.log('   ‚úÖ Course limpiado')
    
    console.log('‚úÖ Base de datos completamente limpiada')
  } catch (error) {
    console.error('‚ùå Error limpiando base de datos:', error)
    throw error
  }
}

function cleanCache() {
  console.log('üóëÔ∏è Limpiando archivos temporales y cach√©...')
  
  const pathsToClean = [
    'reports/',
    '.next/',
    'node_modules/.cache/',
    'tmp/',
    '/tmp/ultimo-prompt-enviado-openai.json'
  ]
  
  pathsToClean.forEach(pathToClean => {
    try {
      if (fs.existsSync(pathToClean)) {
        if (fs.statSync(pathToClean).isDirectory()) {
          fs.rmSync(pathToClean, { recursive: true, force: true })
          console.log(`   ‚úÖ Directorio ${pathToClean} eliminado`)
        } else {
          fs.unlinkSync(pathToClean)
          console.log(`   ‚úÖ Archivo ${pathToClean} eliminado`)
        }
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è No se pudo limpiar ${pathToClean}: ${error.message}`)
    }
  })
  
  console.log('‚úÖ Archivos temporales limpiados')
}

async function recreateDirectories() {
  console.log('üìÅ Recreando directorios necesarios...')
  
  const dirsToCreate = [
    'reports',
    'tmp'
  ]
  
  dirsToCreate.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true })
      console.log(`   ‚úÖ Directorio ${dir} creado`)
    }
  })
}

async function main() {
  console.log('üöÄ ===== LIMPIEZA COMPLETA DEL SISTEMA =====')
  console.log('')
  
  try {
    // Limpiar base de datos
    await cleanDatabase()
    console.log('')
    
    // Limpiar archivos temporales
    cleanCache()
    console.log('')
    
    // Recrear directorios necesarios
    await recreateDirectories()
    console.log('')
    
    console.log('‚úÖ ===== LIMPIEZA COMPLETADA EXITOSAMENTE =====')
    console.log('üìã Pr√≥ximos pasos recomendados:')
    console.log('   1. npx prisma db push (para sincronizar schema)')
    console.log('   2. npx prisma db seed (para datos iniciales)')
    console.log('   3. npx prisma generate (para cliente actualizado)')
    console.log('   4. Reiniciar servidor de desarrollo')
    
  } catch (error) {
    console.error('‚ùå Error durante la limpieza:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

main()