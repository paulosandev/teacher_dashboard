// Script para investigar la discrepancia en las entregas de asignaciones
import * as dotenv from 'dotenv'
dotenv.config()

async function investigateAssignmentDiscrepancy() {
  console.log('üîç INVESTIGANDO DISCREPANCIA EN ASIGNACIONES')
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
  
  const { getMoodleAuthService } = await import('../lib/auth/moodle-auth-service')
  const { MoodleAPIClient } = await import('../lib/moodle/api-client')
  
  const username = 'julioprofe'
  const password = 'admin1234'
  const courseId = 232
  
  try {
    console.log(`üîê Autenticando usuario: ${username}`)
    
    const moodleAuthService = getMoodleAuthService()
    const authResult = await moodleAuthService.authenticateUser(username, password)
    
    if (!authResult.success || !authResult.user) {
      console.log('‚ùå Error de autenticaci√≥n:', authResult.error)
      return
    }
    
    console.log('‚úÖ Autenticaci√≥n exitosa')
    console.log(`üë§ Usuario: ${authResult.user.fullname}`)
    console.log(`üÜî User ID: ${authResult.user.id}`)
    
    const client = new MoodleAPIClient(process.env.MOODLE_URL!, authResult.token!)
    
    console.log('\nüìù === INVESTIGANDO ASIGNACIONES ===')
    
    // Obtener todas las asignaciones del curso
    const assignments = await client.callMoodleAPI('mod_assign_get_assignments', {
      courseids: [courseId]
    })
    
    console.log('üìÑ Respuesta completa de asignaciones:')
    console.log(JSON.stringify(assignments, null, 2))
    
    if (assignments && assignments.courses && assignments.courses.length > 0) {
      const courseAssignments = assignments.courses[0].assignments || []
      
      // Buscar la asignaci√≥n espec√≠fica "Modalidad de actividades | Semana 1"
      const targetAssignment = courseAssignments.find(a => 
        a.name === 'Modalidad de actividades | Semana 1'
      )
      
      if (targetAssignment) {
        console.log('\nüéØ === ASIGNACI√ìN ESPEC√çFICA ENCONTRADA ===')
        console.log('üìã Datos completos de la asignaci√≥n:')
        console.log(JSON.stringify(targetAssignment, null, 2))
        
        console.log('\nüì• === OBTENIENDO SUBMISSIONS ===')
        
        // Obtener submissions de esta asignaci√≥n espec√≠fica
        const submissions = await client.callMoodleAPI('mod_assign_get_submissions', {
          assignmentids: [targetAssignment.id]
        })
        
        console.log('üì¶ Respuesta completa de submissions:')
        console.log(JSON.stringify(submissions, null, 2))
        
        if (submissions && submissions.assignments && submissions.assignments.length > 0) {
          const assignmentSubmissions = submissions.assignments[0].submissions || []
          
          console.log('\nüìä === AN√ÅLISIS DE SUBMISSIONS ===')
          console.log(`üìà Total de submissions encontradas: ${assignmentSubmissions.length}`)
          
          assignmentSubmissions.forEach((submission, index) => {
            console.log(`\nüìÑ Submission ${index + 1}:`)
            console.log(`   üë§ User ID: ${submission.userid}`)
            console.log(`   üìÖ √öltima modificaci√≥n: ${new Date(submission.timemodified * 1000).toISOString()}`)
            console.log(`   ‚úÖ Estado: ${submission.status}`)
            console.log(`   üìä Estado calificaci√≥n: ${submission.gradingstatus}`)
            console.log(`   üî¢ Intento: ${submission.attemptnumber}`)
            console.log(`   üìã Datos completos:`, JSON.stringify(submission, null, 2))
          })
        } else {
          console.log('‚ùå No se encontraron submissions en la respuesta')
        }
        
        console.log('\nüîç === INTENTANDO DIFERENTES M√âTODOS ===')
        
        // Intentar obtener usuarios enrolados para comparar
        try {
          const enrolledUsers = await client.callMoodleAPI('core_enrol_get_enrolled_users', {
            courseid: courseId
          })
          
          console.log(`üë• Usuarios enrolados en el curso: ${enrolledUsers.length}`)
          enrolledUsers.forEach(user => {
            console.log(`   üë§ ${user.fullname} (ID: ${user.id}) - Roles: ${user.roles?.map(r => r.name).join(', ') || 'Sin roles'}`)
          })
        } catch (error) {
          console.log('‚ùå Error obteniendo usuarios enrolados:', error)
        }
        
        // Intentar obtener grades
        try {
          const grades = await client.callMoodleAPI('core_grades_get_grades', {
            courseid: courseId,
            component: 'mod_assign',
            activityid: targetAssignment.cmid
          })
          
          console.log('\nüìä === CALIFICACIONES ===')
          console.log('üìà Respuesta de calificaciones:')
          console.log(JSON.stringify(grades, null, 2))
        } catch (error) {
          console.log('‚ùå Error obteniendo calificaciones:', error)
        }
        
      } else {
        console.log('‚ùå No se encontr√≥ la asignaci√≥n "Modalidad de actividades | Semana 1"')
        console.log('üìã Asignaciones disponibles:')
        courseAssignments.forEach((assignment, index) => {
          console.log(`${index + 1}. ${assignment.name} (ID: ${assignment.id})`)
        })
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error durante la investigaci√≥n:', error)
  }
}

investigateAssignmentDiscrepancy().catch(console.error)