// Test script para verificar que el fix de login funciona correctamente
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function testLoginFix() {
  console.log('üß™ Testing Login Fix - Matr√≠cula no debe ser undefined')
  
  try {
    // 1. Verificar que los usuarios existen y tienen matr√≠cula
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        username: true,
        matricula: true,
        name: true
      }
    })
    
    console.log('\nüìã Usuarios en la base de datos:')
    users.forEach(user => {
      console.log(`  ‚Ä¢ ${user.name}`)
      console.log(`    Email: ${user.email}`)
      console.log(`    Username: ${user.username}`)
      console.log(`    Matr√≠cula: ${user.matricula} ${user.matricula ? '‚úÖ' : '‚ùå UNDEFINED!'}`)
      console.log('')
    })
    
    // 2. Test b√∫squeda por email
    console.log('üîç Test: B√∫squeda por email')
    const userByEmail = await prisma.user.findFirst({
      where: {
        OR: [
          { email: 'cesar.espindola@utel.edu.mx'.toLowerCase() },
          { username: 'cesar.espindola@utel.edu.mx'.toLowerCase() },
          { matricula: 'cesar.espindola@utel.edu.mx'.toLowerCase() }
        ]
      }
    })
    
    if (userByEmail) {
      console.log(`  ‚úÖ Usuario encontrado: ${userByEmail.name} (${userByEmail.matricula})`)
    } else {
      console.log('  ‚ùå Usuario no encontrado por email')
    }
    
    // 3. Test b√∫squeda por matr√≠cula
    console.log('\nüîç Test: B√∫squeda por matr√≠cula')
    const userByMatricula = await prisma.user.findFirst({
      where: {
        OR: [
          { email: 'cesar.espindola'.toLowerCase() },
          { username: 'cesar.espindola'.toLowerCase() },
          { matricula: 'cesar.espindola'.toLowerCase() }
        ]
      }
    })
    
    if (userByMatricula) {
      console.log(`  ‚úÖ Usuario encontrado: ${userByMatricula.name} (${userByMatricula.matricula})`)
    } else {
      console.log('  ‚ùå Usuario no encontrado por matr√≠cula')
    }
    
    // 4. Test b√∫squeda por username
    console.log('\nüîç Test: B√∫squeda por username')
    const userByUsername = await prisma.user.findFirst({
      where: {
        OR: [
          { email: 'paulo.cesar'.toLowerCase() },
          { username: 'paulo.cesar'.toLowerCase() },
          { matricula: 'paulo.cesar'.toLowerCase() }
        ]
      }
    })
    
    if (userByUsername) {
      console.log(`  ‚úÖ Usuario encontrado: ${userByUsername.name} (${userByUsername.matricula})`)
    } else {
      console.log('  ‚ùå Usuario no encontrado por username')
    }
    
    // 5. Test contrase√±a
    console.log('\nüîí Test: Verificaci√≥n de contrase√±a')
    if (userByUsername) {
      const isPasswordValid = await bcrypt.compare('admin1234', userByUsername.password)
      console.log(`  ${isPasswordValid ? '‚úÖ' : '‚ùå'} Contrase√±a ${isPasswordValid ? 'correcta' : 'incorrecta'}`)
    }
    
    // 6. Verificar que no hay matr√≠culas vac√≠as (si matricula es required, esto no deber√≠a pasar)
    console.log('\n‚ö†Ô∏è  Verificaci√≥n de integridad de datos:')
    console.log(`  ‚úÖ Total usuarios: ${users.length}`)
    console.log(`  ‚úÖ Todos tienen matr√≠cula definida: ${users.every(u => u.matricula && u.matricula.trim() !== '') ? 'S√ç' : 'NO'}`)
    
    console.log('\n‚úÖ Test completado')
    
  } catch (error) {
    console.error('‚ùå Error durante el test:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testLoginFix().catch(console.error)