#!/usr/bin/env npx tsx
/**
 * Script directo para limpiar cach√© sin autenticaci√≥n
 */

import { PrismaClient } from '@prisma/client'
import Redis from 'ioredis'

const prisma = new PrismaClient()
const redis = new Redis({
  host: process.env.REDIS_HOST || 'localhost',
  port: parseInt(process.env.REDIS_PORT || '6379'),
  password: process.env.REDIS_PASSWORD,
})

async function clearCache() {
  console.log('üßπ Limpiando cach√© para mostrar nuevos an√°lisis...')

  try {
    // 1. Limpiar an√°lisis antiguos de DB (mantener √∫ltimos 500)
    const deleteResult = await prisma.$executeRaw`
      DELETE FROM ActivityAnalysis
      WHERE id NOT IN (
        SELECT id FROM (
          SELECT id FROM ActivityAnalysis
          ORDER BY generatedAt DESC
          LIMIT 500
        ) AS keep_these
      )
    `
    console.log(`üìä Eliminados ${deleteResult} an√°lisis antiguos de la DB`)

    // 2. Limpiar cach√© de Redis
    await redis.flushdb()
    console.log('üîÑ Cach√© de Redis limpiado completamente')

    // 3. Mostrar estad√≠sticas
    const totalAnalyses = await prisma.activityAnalysis.count()
    console.log(`‚úÖ Total de an√°lisis en DB: ${totalAnalyses}`)

    console.log('‚ú® Cach√© limpiado exitosamente')
    console.log('üìù Los nuevos an√°lisis pedag√≥gicos ya est√°n disponibles')

    process.exit(0)
  } catch (error) {
    console.error('‚ùå Error limpiando cach√©:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
    redis.disconnect()
  }
}

clearCache()