// Archivo para inicializar workers autom√°ticamente
import { setupHourlyUpdates } from './schedulers/auto-update-scheduler'

let workersInitialized = false

export async function initializeWorkers() {
  if (workersInitialized) {
    console.log('‚ö†Ô∏è Workers ya han sido inicializados')
    return
  }

  try {
    console.log('üöÄ Inicializando workers y schedulers...')
    
    // Solo inicializar en producci√≥n o cuando est√© habilitado expl√≠citamente
    if (process.env.NODE_ENV === 'production' || process.env.ENABLE_SCHEDULER === 'true') {
      // Importar y inicializar el worker de auto-update
      await import('../workers/auto-update-worker')
      
      // Importar y inicializar el worker de cola de an√°lisis
      console.log('üî¨ Inicializando worker de cola de an√°lisis...')
      const { startAnalysisQueueWorker } = await import('../workers/analysis-queue-worker')
      await startAnalysisQueueWorker()
      
      // Configurar actualizaciones programadas
      await setupHourlyUpdates()
      
      console.log('‚úÖ Workers y schedulers inicializados correctamente')
    } else {
      console.log('‚ÑπÔ∏è Workers deshabilitados en desarrollo (set ENABLE_SCHEDULER=true para habilitarlos)')
    }
    
    workersInitialized = true
    
  } catch (error) {
    console.error('‚ùå Error inicializando workers:', error)
    throw error
  }
}

// Funci√≥n para verificar si los workers est√°n corriendo
export function areWorkersRunning(): boolean {
  return workersInitialized
}

// Funci√≥n para obtener informaci√≥n de los workers
export function getWorkersInfo() {
  return {
    initialized: workersInitialized,
    environment: process.env.NODE_ENV,
    schedulerEnabled: process.env.ENABLE_SCHEDULER === 'true',
    timestamp: new Date().toISOString()
  }
}

export default initializeWorkers